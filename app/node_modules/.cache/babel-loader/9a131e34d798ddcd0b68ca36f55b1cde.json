{"ast":null,"code":"import 'whatwg-fetch';\nimport { useEffect, useState } from 'react';\nimport { API_URL } from '../utils/constants';\nexport function useCharacters(characters) {\n  const [isLoading, setLoading] = useState(true);\n  const [charactersImgs, setCharacter] = useState([]);\n  useEffect(() => {\n    const urlsToFetch = characters.map(character => character.resourceURI.split(/public/g).pop());\n\n    function getCharacters() {\n      Promise.all(urlsToFetch.map(async url => {\n        const response = await fetch(`${API_URL}${url}`);\n        const data = await response.json();\n        setCharacter(prevCharacter => [...prevCharacter, ...data.data.results.map(result => result.thumbnail)]);\n      }));\n      setLoading(false);\n    }\n\n    getCharacters();\n  }, []);\n  return {\n    isLoading,\n    data: charactersImgs\n  };\n}","map":{"version":3,"sources":["/Users/tiagogomes/Documents/beezy/app/src/hooks/useCharacters.ts"],"names":["useEffect","useState","API_URL","useCharacters","characters","isLoading","setLoading","charactersImgs","setCharacter","urlsToFetch","map","character","resourceURI","split","pop","getCharacters","Promise","all","url","response","fetch","data","json","prevCharacter","results","result","thumbnail"],"mappings":"AAAA,OAAO,cAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAGA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAA6D;AAClE,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,cAAD,EAAiBC,YAAjB,IAAiCP,QAAQ,CAAU,EAAV,CAA/C;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,WAAW,GAAGL,UAAU,CAACM,GAAX,CAAeC,SAAS,IAAIA,SAAS,CAACC,WAAV,CAAsBC,KAAtB,CAA4B,SAA5B,EAAuCC,GAAvC,EAA5B,CAApB;;AAEA,aAASC,aAAT,GAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYR,WAAW,CAACC,GAAZ,CAAiB,MAAOQ,GAAP,IAAe;AAC1C,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAElB,OAAQ,GAAEgB,GAAI,EAAlB,CAA5B;AACA,cAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAd,QAAAA,YAAY,CAAEe,aAAD,IAAoB,CAC/B,GAAGA,aAD4B,EAE/B,GAAGF,IAAI,CAACA,IAAL,CAAUG,OAAV,CAAkBd,GAAlB,CAAuBe,MAAD,IAAiBA,MAAM,CAACC,SAA9C,CAF4B,CAArB,CAAZ;AAID,OARW,CAAZ;AAUApB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDS,IAAAA,aAAa;AACd,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,SAAO;AAAEV,IAAAA,SAAF;AAAagB,IAAAA,IAAI,EAAEd;AAAnB,GAAP;AACD","sourcesContent":["import 'whatwg-fetch'\nimport { useEffect, useState } from 'react'\nimport { API_URL } from '../utils/constants'\nimport { Character,Image, UseCharacters } from './Comic'\n\nexport function useCharacters(characters:Character[]): UseCharacters{\n  const [isLoading, setLoading] = useState(true)\n  const [charactersImgs, setCharacter] = useState<Image[]>([])\n  \n  \n  useEffect(() => {\n    const urlsToFetch = characters.map(character => character.resourceURI.split(/public/g).pop())\n    \n    function getCharacters() {\n      Promise.all(urlsToFetch.map( async (url) => {\n        const response = await fetch(`${API_URL}${url}`)\n        const data = await response.json()\n        \n        setCharacter((prevCharacter) => ([\n          ...prevCharacter,\n          ...data.data.results.map((result: any) => result.thumbnail)\n        ]))\n      }))\n    \n      setLoading(false)\n    }\n    getCharacters()\n  }, [])\n  \n  return { isLoading, data: charactersImgs }\n}\n"]},"metadata":{},"sourceType":"module"}