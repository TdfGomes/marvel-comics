{"ast":null,"code":"var _jsxFileName = \"/Users/tiagogomes/Documents/beezy/app/src/components/UI/Select.tsx\";\nimport React from 'react'; // import styled from 'styled-components'\n\nimport RSelect from 'react-select';\nimport { colors, borderStyles, borderWidths, sizes, radii, space, fontSizes, lineHeights } from './theme';\nconst styles = {\n  control: provided => ({ ...provided,\n    width: sizes['medium'],\n    paddingTop: space[1],\n    paddingBottom: space[1],\n    fontSize: fontSizes[2],\n    lineHeight: lineHeights[1],\n    borderStyle: borderStyles['outline'],\n    borderWidth: borderWidths[1],\n    borderColor: colors['secondary'],\n    backgroundColor: colors['transparent'],\n    color: colors['text'],\n    borderRadius: radii[0],\n    outline: 'none',\n    boxShadow: 'none',\n    '&:hover': {\n      borderColor: colors['text']\n    }\n  }),\n  menu: provided => ({ ...provided,\n    width: sizes['medium'],\n    boxShadow: 'none',\n    borderRadius: radii[0]\n  }),\n  option: (provided, state) => ({ ...provided,\n    backgroundColor: state.isSelected ? colors['secondary'] : state.isFocused ? colors['lemon'] : colors['transparent'],\n    '&:active': {\n      backgroundColor: colors['orange'],\n      color: colors['text']\n    },\n    color: state.isSelected ? colors['text'] : colors['dark']\n  }),\n  placeholder: provided => ({ ...provided,\n    color: colors['text']\n  }),\n  dropdownIndicator: provided => ({ ...provided,\n    color: colors['text']\n  }),\n  singleValue: provided => ({ ...provided,\n    color: colors['text']\n  }),\n  indicatorSeparator: () => ({})\n};\n\nfunction Select({\n  options,\n  onChange,\n  ...rest\n}) {\n  const handleChange = value => {\n    onChange(value);\n  };\n\n  return /*#__PURE__*/React.createElement(RSelect, Object.assign({}, rest, {\n    onChange: handleChange,\n    options: options,\n    styles: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default Select;","map":{"version":3,"sources":["/Users/tiagogomes/Documents/beezy/app/src/components/UI/Select.tsx"],"names":["React","RSelect","colors","borderStyles","borderWidths","sizes","radii","space","fontSizes","lineHeights","styles","control","provided","width","paddingTop","paddingBottom","fontSize","lineHeight","borderStyle","borderWidth","borderColor","backgroundColor","color","borderRadius","outline","boxShadow","menu","option","state","isSelected","isFocused","placeholder","dropdownIndicator","singleValue","indicatorSeparator","Select","options","onChange","rest","handleChange","value"],"mappings":"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","sourcesContent":["import React from 'react'\n// import styled from 'styled-components'\nimport RSelect, { ValueType, OptionTypeBase } from 'react-select'\nimport {colors, borderStyles, borderWidths, sizes, radii, space,fontSizes,lineHeights } from './theme'\n\n\nconst styles = {\n  control: (provided: any) => ({\n    ...provided,\n    width: sizes['medium'],\n    paddingTop: space[1],\n    paddingBottom: space[1],\n    fontSize: fontSizes[2],\n    lineHeight: lineHeights[1],\n    borderStyle: borderStyles['outline'],\n    borderWidth: borderWidths[1],\n    borderColor: colors['secondary'],\n    backgroundColor: colors['transparent'],\n    color: colors['text'],\n    borderRadius: radii[0],\n    outline: 'none',\n    boxShadow: 'none',\n    '&:hover': {\n      borderColor: colors['text'],\n    },\n  }),\n  menu: (provided: any) => ({\n    ...provided,\n    width: sizes['medium'],\n    boxShadow: 'none',\n    borderRadius: radii[0],\n  }),\n  option: (provided: any, state: any) => ({\n    ...provided,\n    backgroundColor: state.isSelected\n      ? colors['secondary']\n      : state.isFocused\n        ? colors['lemon']\n        : colors['transparent'],\n      '&:active':{\n        backgroundColor:colors['orange'],\n        color: colors['text'],\n      },\n    color: state.isSelected ? colors['text'] : colors['dark'],\n  }),\n  placeholder: (provided: any) => ({\n    ...provided,\n    color: colors['text'],\n  }),\n  dropdownIndicator: (provided: any) => ({\n    ...provided,\n    color: colors['text'],\n  }),\n  singleValue: (provided: any) => ({\n    ...provided,\n    color: colors['text'],\n  }),\n  indicatorSeparator: () => ({}),\n}\n\nexport interface Option {\n  label: string\n  value: string \n}\ninterface SelectProps{\n  options: Option[]\n  onChange: (value:ValueType<Option>) => void\n}\n\nfunction Select({options,onChange, ...rest}:SelectProps){\n\n  const handleChange = (value: ValueType<Option>) => {\n    onChange(value)\n  }\n\n  return (\n    <RSelect {...rest}\n      onChange={handleChange}\n      options={options}\n      styles={styles}\n    />\n  )\n}\n\nexport default Select\n\n"]},"metadata":{},"sourceType":"module"}