{"ast":null,"code":"import 'whatwg-fetch';\nimport { useLayoutEffect, useState } from 'react';\nimport { API_URL } from '../utils/constants';\nexport function useCharacters(characters) {\n  const [isLoading, setLoading] = useState(true);\n  const [charactersImgs, setCharacter] = useState([]);\n  const urlsToFetch = characters.map(character => character.resourceURI.split(/public/g).pop());\n  useLayoutEffect(() => {\n    function getCharacters() {\n      // let data\n      Promise.all(urlsToFetch.map(async url => {\n        const response = await fetch(`${API_URL}${url}`);\n        const data = await response.json();\n        setCharacter(prevCharacters => [...prevCharacters, ...data.data.results.map(result => ({\n          thumbnail: result.thumbnail,\n          name: result.name\n        }))]);\n      })).finally(() => {\n        setLoading(false);\n      });\n    }\n\n    getCharacters();\n  }, [urlsToFetch]);\n  return {\n    isLoading,\n    data: charactersImgs\n  };\n}","map":{"version":3,"sources":["/Users/tiagogomes/Documents/beezy/app/src/hooks/useCharacters.ts"],"names":["useLayoutEffect","useState","API_URL","useCharacters","characters","isLoading","setLoading","charactersImgs","setCharacter","urlsToFetch","map","character","resourceURI","split","pop","getCharacters","Promise","all","url","response","fetch","data","json","prevCharacters","results","result","thumbnail","name","finally"],"mappings":"AAAA,OAAO,cAAP;AACA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAGA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAA6D;AAClE,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,cAAD,EAAiBC,YAAjB,IAAiCP,QAAQ,CAAmB,EAAnB,CAA/C;AAEA,QAAMQ,WAAW,GAAGL,UAAU,CAACM,GAAX,CAAeC,SAAS,IAAIA,SAAS,CAACC,WAAV,CAAsBC,KAAtB,CAA4B,SAA5B,EAAuCC,GAAvC,EAA5B,CAApB;AAEAd,EAAAA,eAAe,CAAC,MAAM;AAEpB,aAASe,aAAT,GAAyB;AACvB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,WAAW,CAACC,GAAZ,CAAiB,MAAOQ,GAAP,IAAe;AAC1C,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAElB,OAAQ,GAAEgB,GAAI,EAAlB,CAA5B;AACA,cAAMG,IAA4B,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3C;AAEAd,QAAAA,YAAY,CAAEe,cAAD,IAAqB,CAChC,GAAGA,cAD6B,EAEhC,GAAGF,IAAI,CAACA,IAAL,CAAUG,OAAV,CAAkBd,GAAlB,CAAuBe,MAAD,KAAkB;AAACC,UAAAA,SAAS,EAACD,MAAM,CAACC,SAAlB;AAA6BC,UAAAA,IAAI,EAACF,MAAM,CAACE;AAAzC,SAAlB,CAAtB,CAF6B,CAAtB,CAAZ;AAMD,OAVW,CAAZ,EAUIC,OAVJ,CAUY,MAAM;AAChBtB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAZD;AAaD;;AAEDS,IAAAA,aAAa;AAEd,GAtBc,EAsBZ,CAACN,WAAD,CAtBY,CAAf;AAwBA,SAAO;AAAEJ,IAAAA,SAAF;AAAagB,IAAAA,IAAI,EAAEd;AAAnB,GAAP;AACD","sourcesContent":["import 'whatwg-fetch'\nimport { useLayoutEffect, useState } from 'react'\nimport { API_URL } from '../utils/constants'\nimport { Character, CharactersData, UseCharacters, ApiResponse } from './Comic'\n\nexport function useCharacters(characters:Character[]): UseCharacters{\n  const [isLoading, setLoading] = useState(true)\n  const [charactersImgs, setCharacter] = useState<CharactersData[]>([])\n  \n  const urlsToFetch = characters.map(character => character.resourceURI.split(/public/g).pop())\n\n  useLayoutEffect(() => {\n    \n    function getCharacters() {\n      // let data\n\n      Promise.all(urlsToFetch.map( async (url) => {\n        const response = await fetch(`${API_URL}${url}`)\n        const data: ApiResponse<Character> = await response.json()\n\n        setCharacter((prevCharacters) => ([\n          ...prevCharacters,\n          ...data.data.results.map((result: any) => ({thumbnail:result.thumbnail, name:result.name}))\n        ]))\n        \n        \n      })).finally(() => {\n        setLoading(false)\n      })\n    }\n\n    getCharacters()\n    \n  }, [urlsToFetch])\n  \n  return { isLoading, data: charactersImgs }\n}\n"]},"metadata":{},"sourceType":"module"}