{"ast":null,"code":"import 'whatwg-fetch';\nimport { useEffect, useState, useRef } from 'react';\nimport { API_URL } from '../utils/constants';\nexport function useCharacters(characters) {\n  const [isLoading, setLoading] = useState(true);\n  const [charactersImgs, setCharacter] = useState([]);\n  const charactersRef = useRef(characters);\n  useEffect(() => {\n    const urlsToFetch = charactersRef.current.map(character => character.resourceURI.split(/public/g).pop());\n\n    function getCharacters() {\n      let data;\n      Promise.all(urlsToFetch.map(async url => {\n        const response = await fetch(`${API_URL}${url}`);\n        data = await response.json();\n      })).finally(() => {\n        var _data;\n\n        setCharacter((_data = data) === null || _data === void 0 ? void 0 : _data.data.results.map(result => ({\n          thumbnail: result.thumbnail,\n          name: result.name\n        })));\n        setLoading(false);\n      });\n    }\n\n    getCharacters();\n  }, [charactersRef]);\n  return {\n    isLoading,\n    data: charactersImgs\n  };\n}","map":{"version":3,"sources":["/Users/tiagogomes/Documents/beezy/app/src/hooks/useCharacters.ts"],"names":["useEffect","useState","useRef","API_URL","useCharacters","characters","isLoading","setLoading","charactersImgs","setCharacter","charactersRef","urlsToFetch","current","map","character","resourceURI","split","pop","getCharacters","data","Promise","all","url","response","fetch","json","finally","results","result","thumbnail","name"],"mappings":"AAAA,OAAO,cAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAGA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAA6D;AAClE,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACO,cAAD,EAAiBC,YAAjB,IAAiCR,QAAQ,CAAmB,EAAnB,CAA/C;AACA,QAAMS,aAAa,GAAGR,MAAM,CAACG,UAAD,CAA5B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,WAAW,GAAGD,aAAa,CAACE,OAAd,CAAsBC,GAAtB,CAA0BC,SAAS,IAAIA,SAAS,CAACC,WAAV,CAAsBC,KAAtB,CAA4B,SAA5B,EAAuCC,GAAvC,EAAvC,CAApB;;AAEA,aAASC,aAAT,GAAyB;AACvB,UAAIC,IAAJ;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,WAAW,CAACE,GAAZ,CAAiB,MAAOS,GAAP,IAAe;AAC1C,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAErB,OAAQ,GAAEmB,GAAI,EAAlB,CAA5B;AACAH,QAAAA,IAAI,GAAG,MAAMI,QAAQ,CAACE,IAAT,EAAb;AAGD,OALW,CAAZ,EAKIC,OALJ,CAKY,MAAM;AAAA;;AAChBjB,QAAAA,YAAY,UAACU,IAAD,0CAAC,MAAMA,IAAN,CAAWQ,OAAX,CAAmBd,GAAnB,CAAwBe,MAAD,KAAkB;AAACC,UAAAA,SAAS,EAACD,MAAM,CAACC,SAAlB;AAA6BC,UAAAA,IAAI,EAACF,MAAM,CAACE;AAAzC,SAAlB,CAAvB,CAAD,CAAZ;AACAvB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OARD;AASD;;AAEDW,IAAAA,aAAa;AAEd,GAnBQ,EAmBN,CAACR,aAAD,CAnBM,CAAT;AAqBA,SAAO;AAAEJ,IAAAA,SAAF;AAAaa,IAAAA,IAAI,EAAEX;AAAnB,GAAP;AACD","sourcesContent":["import 'whatwg-fetch'\nimport { useEffect, useState, useRef } from 'react'\nimport { API_URL } from '../utils/constants'\nimport { Character, CharactersData, UseCharacters, ApiResponse } from './Comic'\n\nexport function useCharacters(characters:Character[]): UseCharacters{\n  const [isLoading, setLoading] = useState(true)\n  const [charactersImgs, setCharacter] = useState<CharactersData[]>([])\n  const charactersRef = useRef(characters)\n  \n  useEffect(() => {\n    const urlsToFetch = charactersRef.current.map(character => character.resourceURI.split(/public/g).pop())\n    \n    function getCharacters() {\n      let data:ApiResponse<Character>\n\n      Promise.all(urlsToFetch.map( async (url) => {\n        const response = await fetch(`${API_URL}${url}`)\n        data = await response.json()\n\n        \n      })).finally(() => {\n        setCharacter(data?.data.results.map((result: any) => ({thumbnail:result.thumbnail, name:result.name})))\n        setLoading(false)\n      })\n    }\n\n    getCharacters()\n    \n  }, [charactersRef])\n  \n  return { isLoading, data: charactersImgs }\n}\n"]},"metadata":{},"sourceType":"module"}